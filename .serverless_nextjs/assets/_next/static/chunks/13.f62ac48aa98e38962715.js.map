{"version":3,"sources":["webpack://_N_E/./node_modules/@apollo/react-ssr/index.js","webpack://_N_E/./node_modules/@apollo/client/react/ssr/RenderPromises.js","webpack://_N_E/./node_modules/@apollo/client/react/ssr/getDataFromTree.js","webpack://_N_E/./node_modules/@apollo/client/react/ssr/renderToStringWithData.js"],"names":["module","exports","RenderPromises","this","queryPromises","Map","queryInfoTrie","prototype","registerSSRObservable","observable","props","lookupQueryInfo","getSSRObservable","addQueryPromise","queryInstance","finish","getOptions","seen","set","Promise","resolve","fetchData","hasPromises","size","consumeAndAwaitPromises","_this","promises","forEach","promise","push","clear","all","query","variables","varMap","get","has","variablesString","JSON","stringify","info","getDataFromTree","tree","context","getMarkupFromTree","renderFunction","renderToStaticMarkup","_a","_b","_c","renderPromises","then","process","ApolloContext","element","createElement","Provider","value","html","renderToStringWithData","component","renderToString"],"mappings":"yFAAAA,EAAOC,QAAU,EAAQ,S,kSCMzB,IAAIC,EAAkB,WAClB,SAASA,IACLC,KAAKC,cAAgB,IAAIC,IACzBF,KAAKG,cAAgB,IAAID,IA2C7B,OAzCAH,EAAeK,UAAUC,sBAAwB,SAAUC,EAAYC,GACnEP,KAAKQ,gBAAgBD,GAAOD,WAAaA,GAE7CP,EAAeK,UAAUK,iBAAmB,SAAUF,GAClD,OAAOP,KAAKQ,gBAAgBD,GAAOD,YAEvCP,EAAeK,UAAUM,gBAAkB,SAAUC,EAAeC,GAEhE,OADWZ,KAAKQ,gBAAgBG,EAAcE,cACpCC,KAMHF,KALHZ,KAAKC,cAAcc,IAAIJ,EAAcE,aAAc,IAAIG,SAAQ,SAAUC,GACrEA,EAAQN,EAAcO,iBAEnB,OAIfnB,EAAeK,UAAUe,YAAc,WACnC,OAAOnB,KAAKC,cAAcmB,KAAO,GAErCrB,EAAeK,UAAUiB,wBAA0B,WAC/C,IAAIC,EAAQtB,KACRuB,EAAW,GAMf,OALAvB,KAAKC,cAAcuB,SAAQ,SAAUC,EAASd,GAC1CW,EAAMd,gBAAgBG,GAAeG,MAAO,EAC5CS,EAASG,KAAKD,MAElBzB,KAAKC,cAAc0B,QACZX,QAAQY,IAAIL,IAEvBxB,EAAeK,UAAUI,gBAAkB,SAAUD,GACjD,IAAIJ,EAAgBH,KAAKG,cACrB0B,EAAQtB,EAAMsB,MAAOC,EAAYvB,EAAMuB,UACvCC,EAAS5B,EAAc6B,IAAIH,IAAU,IAAI3B,IACxCC,EAAc8B,IAAIJ,IACnB1B,EAAcY,IAAIc,EAAOE,GAC7B,IAAIG,EAAkBC,KAAKC,UAAUN,GACjCO,EAAON,EAAOC,IAAIE,IA9CnB,CACHpB,MAAM,EACNR,WAAY,MA+CZ,OAFKyB,EAAOE,IAAIC,IACZH,EAAOhB,IAAImB,EAAiBG,GACzBA,GAEJtC,EA9CU,GCFd,SAASuC,EAAgBC,EAAMC,GAElC,YADgB,IAAZA,IAAsBA,EAAU,IAC7BC,EAAkB,CACrBF,KAAMA,EACNC,QAASA,EACTE,eAAgB,EAAQ,QAAoBC,uBAG7C,SAASF,EAAkBG,GAC9B,IAAIL,EAAOK,EAAGL,KAAMM,EAAKD,EAAGJ,QAASA,OAAiB,IAAPK,EAAgB,GAAKA,EAAIC,EAAKF,EAAGF,eAAgBA,OAAwB,IAAPI,EAAgB,EAAQ,QAAoBH,qBAAuBG,EAChLC,EAAiB,IAAIhD,EAYzB,OAAOiB,QAAQC,UAAU+B,MAXzB,SAASC,IACL,IAAIC,EAAgB,cACpB,OAAO,IAAIlC,SAAQ,SAAUC,GACzB,IAAIkC,EAAU,IAAMC,cAAcF,EAAcG,SAAU,CAAEC,MAAO,YAAS,YAAS,GAAId,GAAU,CAAEO,eAAgBA,KAAqBR,GAC1ItB,EAAQyB,EAAeS,OACxBH,MAAK,SAAUO,GACd,OAAOR,EAAe5B,cAChB4B,EAAe1B,0BAA0B2B,KAAKC,GAC9CM,QCtBX,SAASC,EAAuBC,GACnC,OAAOhB,EAAkB,CACrBF,KAAMkB,EACNf,eAAgB,EAAQ,QAAoBgB","file":"static/chunks/13.f62ac48aa98e38962715.js","sourcesContent":["module.exports = require('@apollo/client/react/ssr');\n","function makeDefaultQueryInfo() {\n    return {\n        seen: false,\n        observable: null\n    };\n}\nvar RenderPromises = (function () {\n    function RenderPromises() {\n        this.queryPromises = new Map();\n        this.queryInfoTrie = new Map();\n    }\n    RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n        this.lookupQueryInfo(props).observable = observable;\n    };\n    RenderPromises.prototype.getSSRObservable = function (props) {\n        return this.lookupQueryInfo(props).observable;\n    };\n    RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n        var info = this.lookupQueryInfo(queryInstance.getOptions());\n        if (!info.seen) {\n            this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n                resolve(queryInstance.fetchData());\n            }));\n            return null;\n        }\n        return finish();\n    };\n    RenderPromises.prototype.hasPromises = function () {\n        return this.queryPromises.size > 0;\n    };\n    RenderPromises.prototype.consumeAndAwaitPromises = function () {\n        var _this = this;\n        var promises = [];\n        this.queryPromises.forEach(function (promise, queryInstance) {\n            _this.lookupQueryInfo(queryInstance).seen = true;\n            promises.push(promise);\n        });\n        this.queryPromises.clear();\n        return Promise.all(promises);\n    };\n    RenderPromises.prototype.lookupQueryInfo = function (props) {\n        var queryInfoTrie = this.queryInfoTrie;\n        var query = props.query, variables = props.variables;\n        var varMap = queryInfoTrie.get(query) || new Map();\n        if (!queryInfoTrie.has(query))\n            queryInfoTrie.set(query, varMap);\n        var variablesString = JSON.stringify(variables);\n        var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n        if (!varMap.has(variablesString))\n            varMap.set(variablesString, info);\n        return info;\n    };\n    return RenderPromises;\n}());\nexport { RenderPromises };\n//# sourceMappingURL=RenderPromises.js.map","import { __assign } from \"tslib\";\nimport React from 'react';\nimport { getApolloContext } from \"../context/index.js\";\nimport { RenderPromises } from \"./RenderPromises.js\";\nexport function getDataFromTree(tree, context) {\n    if (context === void 0) { context = {}; }\n    return getMarkupFromTree({\n        tree: tree,\n        context: context,\n        renderFunction: require('react-dom/server').renderToStaticMarkup\n    });\n}\nexport function getMarkupFromTree(_a) {\n    var tree = _a.tree, _b = _a.context, context = _b === void 0 ? {} : _b, _c = _a.renderFunction, renderFunction = _c === void 0 ? require('react-dom/server').renderToStaticMarkup : _c;\n    var renderPromises = new RenderPromises();\n    function process() {\n        var ApolloContext = getApolloContext();\n        return new Promise(function (resolve) {\n            var element = React.createElement(ApolloContext.Provider, { value: __assign(__assign({}, context), { renderPromises: renderPromises }) }, tree);\n            resolve(renderFunction(element));\n        }).then(function (html) {\n            return renderPromises.hasPromises()\n                ? renderPromises.consumeAndAwaitPromises().then(process)\n                : html;\n        });\n    }\n    return Promise.resolve().then(process);\n}\n//# sourceMappingURL=getDataFromTree.js.map","import { getMarkupFromTree } from \"./getDataFromTree.js\";\nexport function renderToStringWithData(component) {\n    return getMarkupFromTree({\n        tree: component,\n        renderFunction: require('react-dom/server').renderToString\n    });\n}\n//# sourceMappingURL=renderToStringWithData.js.map"],"sourceRoot":""}